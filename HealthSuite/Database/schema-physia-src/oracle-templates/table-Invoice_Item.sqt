{
	$OUT = "";

	$tableName = $table->{name};
	$tableAbbrev = $table->{abbrev};
	$templOutputPathId = 'tables-code';
	$templOutputFile = "$tableName\_totals.sql";
	
	print STDERR "about to create template $templOutputPathId/$templOutputFile\n";
}

prompt -----------------------------------------------------------------------;
prompt Creation of triggers for { $tableName }
prompt -----------------------------------------------------------------------;

create or replace trigger biud_{$tableAbbrev}
before insert or update or delete on {$tableName}
   
  begin 
  
     pkg_inv_trig.v_ind_inv_item := 0;
     pkg_inv_trig.v_ind_inv_item_sort := 0;
     pkg_inv_trig.v_inv_item_parent_id.delete;
     pkg_inv_trig.v_inv_item_parent_id_dist.delete;
     
     if inserting then
     
       pkg_inv_trig.v_ind_inv_item_ins := 0;
       pkg_inv_trig.v_inv_item_id_ins.delete;
       
     end if;
  
  end biud_{$tableAbbrev};
   
/
show errors;


create or replace trigger biu_{$tableAbbrev}_row
before insert or update on {$tableName}
for each row

  declare
  
  begin 
  
    if :new.extended_cost is null and :new.total_adjust is null then
      :new.balance := null;
    else
      :new.balance := nvl(:new.extended_cost, 0) + nvl(:new.total_adjust, 0);
    end if;
  
  end biu_{$tableAbbrev}_row;
/
show errors;

   
create or replace trigger aiud_{$tableAbbrev}_row
after insert or update or delete on {$tableName}
for each row

  declare
  
  begin 

    pkg_inv_trig.v_ind_inv_item := pkg_inv_trig.v_ind_inv_item + 1;
    
    if deleting then
      pkg_inv_trig.v_inv_item_parent_id(pkg_inv_trig.v_ind_inv_item) := :old.parent_id;
     elsif updating then
       pkg_inv_trig.v_inv_item_parent_id(pkg_inv_trig.v_ind_inv_item) := :new.parent_id; 
     elsif inserting then
     
       pkg_inv_trig.v_ind_inv_item_ins := pkg_inv_trig.v_ind_inv_item_ins + 1;     
       pkg_inv_trig.v_inv_item_id_ins(pkg_inv_trig.v_ind_inv_item_ins) := :new.item_id;
       
       pkg_inv_trig.v_inv_item_parent_id(pkg_inv_trig.v_ind_inv_item) := :new.parent_id; 
     end if;
 
   end aiud_{$tableAbbrev}_row;
/
show errors;
   
   
create or replace trigger aiud_{$tableAbbrev}
after insert or update or delete on {$tableName}   
   
  declare
    v_parent_id invoice_item.parent_id%type;
    v_total_items invoice.total_items%type;
    v_total_cost invoice.total_cost%type;
    v_total_adjust invoice.total_adjust%type;
    v_balance invoice.balance%type;
    
  begin 
  
     pkg_inv_trig.sort_inv_item; 
  
     for i in 1..pkg_inv_trig.v_ind_inv_item_sort loop
     
       v_parent_id := pkg_inv_trig.v_inv_item_parent_id_dist(i);
       
       select count(item_id) into v_total_items from invoice_item
         where parent_id=v_parent_id and item_type<>5 and item_type<>7;
         
       select sum(total_adjust), sum(extended_cost) into v_total_adjust, v_total_cost from invoice_item
         where parent_id=v_parent_id;
         
       if v_total_cost is null and v_total_adjust is null then
         v_balance := null;
       else
         v_balance := nvl(v_total_cost, 0) + nvl(v_total_adjust, 0);
       end if;
       
       update invoice set total_adjust = v_total_adjust,
                          total_cost = v_total_cost,
                          total_items = v_total_items,
                          balance = v_balance
          where invoice_id = v_parent_id;
          
     end loop; 
 
   end aiud_{$tableAbbrev};   
/
show errors;

/* this triggers are for denormalization */

create or replace trigger au_{$tableAbbrev}_row
after update on {$tableName}
for each row

declare
  
begin 

    update auto_invoice_chrg
      set units = :new.quantity,
          item_type = :new.item_type,
          unit_cost = :new.unit_cost,
          charges = :new.extended_cost,
          caption = :new.caption,
          service_begin_date = :new.service_begin_date,
          service_end_date = :new.service_end_date, 
          code = :new.code,
          rel_diags = :new.rel_diags,
          hcfa_service_type = :new.hcfa_service_type,
          ffs_flag = nvl(:new.data_num_a, 0)
    where item_id = :new.item_id and adjustment_id is null;
    
    update auto_invoice_chrg
       set    item_type = :new.item_type,
              caption = :new.caption,
              service_begin_date = :new.service_begin_date,
              service_end_date = :new.service_end_date, 
              code = :new.code,
              rel_diags = :new.rel_diags,
              hcfa_service_type = :new.hcfa_service_type,
              ffs_flag = nvl(:new.data_num_a, 0)
    where item_id = :new.item_id and adjustment_id is not null;
    
end au_{$tableAbbrev}_row;
/
show errors;


create or replace trigger ai_{$tableAbbrev}_row
after insert on {$tableName}

declare
    v_item_id invoice_item.item_id%type; 
    
begin 

     for i in 1..pkg_inv_trig.v_ind_inv_item_ins loop
     
       v_item_id := pkg_inv_trig.v_inv_item_id_ins(i);

       INSERT INTO Auto_Invoice_Chrg
       (invoice_id,
       trans_id,
       item_id,
       invoice_date,
       batch_date,
       batch_id,
       caption,
       charges,
       invoice_type,
       invoice_status,
       item_type,
       units,
       unit_cost,
       service_facility_id,
       billing_facility_id,
       provider_id,
       care_provider_id,
       service_begin_date,
       service_end_date,
       code,
       rel_diags,
       submitter_id,
       client_type,
       client_id,
       hcfa_service_type,
       ffs_flag,
       owner_org_id,
       billing_id,
       trans_type,
       invoice_subtype,
       parent_invoice_id)
       SELECT
         i.invoice_id,
         t.trans_id,
         ii.item_id,
         i.invoice_date,
         ia.value_date,
         ia.value_text,
         ii.caption,
	 extended_cost,
	 i.invoice_type,
	 i.invoice_status,
	 ii.item_type,
	 ii.quantity,
	 ii.unit_cost,
	 t.service_facility_id,
	 t.billing_facility_id,
	 t.provider_id,
	 t.care_provider_id,
	 ii.service_begin_date,
	 ii.service_end_date,
	 ii.code as code,
	 ii.rel_diags as rel_diags,
	 i.SUBMITTER_ID,
	 i.client_type,
	 i.client_id,
	 ii.hcfa_service_type,
	 nvl(ii.data_num_a,0) as ffs_cap,
	 i.owner_id,
	 i.billing_id,
	 t.trans_type,
	 i.invoice_subtype,
	 i.parent_invoice_id	
FROM 	invoice i, transaction t, invoice_item ii, invoice_attribute ia 
WHERE   t.trans_id = i.main_transaction 			
	AND i.invoice_id = ia.parent_id(+)     
	AND ii.parent_id  = i.invoice_id
	AND ia.item_name(+)  = 'Invoice/Creation/Batch ID'		
	AND ii.item_id = v_item_id;

     end loop; 

end ai_{$tableAbbrev}_row;
/
show errors;

